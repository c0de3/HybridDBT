#include <transformation/irScheduler.h>
#include <isa/irISA.h>
#include <isa/vexISA.h>
#include <iostream>

#define MAX_ISSUE_WIDTH 8
ac_int<32, false> scheduling(
	ac_int<1, false> optLevel,
	ac_int<8, false> basicBlockSize,
	ac_int<128, false> bytecode[256],
	ac_int<128, false> binaries[1024],
	ac_int<16, false> addressInBinaries,
	ac_int<6, false> placeOfRegisters[512],
	ac_int<6, false> numberFreeRegister,
	ac_int<6, false> freeRegisters[64],
	ac_int<4, false> issue_width,
	ac_int<MAX_ISSUE_WIDTH * 2, false> way_specialisation,
	ac_int<32, false> placeOfInstr[256]
);

		 ac_int<32, false> bytecode[1024] = {
				 0x831c000f, 0x8543c0c1, 0x0, 0x35,
0x40bc0000, 0x18000001, 0x0, 0x35,
0x83b40004, 0x85414041, 0x0, 0x35,
0x83a40001, 0x434049, 0x0, 0x0,
0x82a00106, 0x4380c9, 0x0, 0x0,
0x83b40004, 0x1c34049, 0x30000, 0x0,
0x831c00ff, 0x1414049, 0x20000, 0x0,
0x83a40001, 0x2424049, 0x40000, 0x0,
0x830c0000, 0x2420049, 0x40000, 0x0,
0x82a00110, 0x2c34049, 0x50000, 0x0,
0x82a00110, 0x3414049, 0x60000, 0x0,
0x83a40002, 0x430049, 0x0, 0x0,
0x837c0002, 0x4c34049, 0x90000, 0x0,
0x83a40003, 0x43c044, 0x0, 0xb040303,
0x837c0002, 0x3c24049, 0x70000, 0x0,
0x837c0002, 0x5414049, 0xa0000, 0x0,
0x837c0002, 0x4420049, 0x80000, 0x0,
0x8208000e, 0x85c24049, 0xe0000, 0x0,
0x8208000f, 0x85c14049, 0xf0000, 0x0,
0x83b40004, 0x5c30049, 0xb0000, 0x0,
0x83b40004, 0x6c3c049, 0xd0000, 0x0,
0x8208000c, 0x85c34049, 0xc0000, 0x0,
0x82080010, 0x85c2004a, 0x100000, 0x11,
0x83a40002, 0x241c049, 0x40000, 0x0,
0x408c0000, 0xac34049, 0x150000, 0x0,
0x408c0000, 0x8c48049, 0x110000, 0x0,
0x82a00110, 0x9c30049, 0x130000, 0x0,
0x408c0000, 0x942404a, 0x120000, 0x19,
0x82a00110, 0xa43c04a, 0x140000, 0x9,
0x83a40003, 0x2438044, 0x0, 0x17080707,
0x408c0000, 0xb42004a, 0x160000, 0x18,
0x837c0002, 0xbc1c049, 0x170000, 0x0,
0x837c0002, 0xd430049, 0x1a0000, 0x0,
0x837c0002, 0xe43c049, 0x1c0000, 0x0,
0x837c0002, 0xec38049, 0x1d0000, 0x0,
0x8208001f, 0x85c1404b, 0x1f0000, 0x1b12,
0x82080020, 0x85c3004a, 0x200000, 0x15,
0x82080021, 0x85c3c04a, 0x210000, 0x16,
0x82080022, 0x85c3804a, 0x220000, 0x23,
0x408c0000, 0x1241c04b, 0x240000, 0x2319,
0x408c0000, 0x11c4c04a, 0x230000, 0x1b,
0x408c0000, 0x12c3004b, 0x250000, 0x271e,
0x408c0000, 0x1341404b, 0x260000, 0x2827,
0xc048001b, 0xf43c053, 0x1b1e00, 0x29,
0x83a40004, 0x85428042, 0x0, 0x200,
0xc0480018, 0xcc38053, 0x181900, 0x2a,
0xc0480027, 0x14434053, 0x272800, 0x2d,
0x82a0002b, 0x16c3c052, 0x2d2b00, 0x0,
0xc0480029, 0x15438053, 0x292a00, 0x2f,
0x82a0002e, 0x17c3c052, 0x2f2e00, 0x0,
0x82a00030, 0x18c3c052, 0x313000, 0x0,
0x82a00032, 0x88c44009, 0x320000, 0x0,
0x8238011c, 0x16480049, 0x2c0000, 0x0,
0x212c03ff, 0x8c0d00c9, 0x340000, 0x0};


int main(int argc, char *argv[]){


ac_int<128, false> mon_bytecode[256];
for (ac_int<32, false> i = 0; i < 1024; ++i) {
		mon_bytecode[i/4].set_slc(96-(i%4)*32, bytecode[i]);
}

		 ac_int<1, false> optLevel = 0;
		 ac_int<8, false> basicBlockSize = 54;
for (ac_int<8, false> i = 0; i < basicBlockSize; ++i) {
		printBytecodeInstruction(i, bytecode[i*4], bytecode[i*4+1], bytecode[i*4+2], bytecode[i*4+3]);
	}
		 ac_int<128, false> binaries[1024];
		 ac_int<6, false> placeOfRegisters[512];
		 for (ac_int<32, false> i = 0; i < 64; ++i) {
					placeOfRegisters[256+i] = i;
		 }
		 ac_int<6, false> numberFreeRegister = 32;
		 ac_int<6, false> freeRegisters[64] =
{10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,0,1,2,3,4,5,6,7,8,9};
		 ac_int<4, false> issue_width = 4;
		 ac_int<MAX_ISSUE_WIDTH * 2, false> way_specialisation = 0xadb4;
		 ac_int<32, false> placeOfInstr[256];

		 ac_int<32, false> last = scheduling(optLevel, basicBlockSize, mon_bytecode, binaries, 0, placeOfRegisters, numberFreeRegister, freeRegisters, issue_width, way_specialisation, placeOfInstr);

     for (ac_int<32, false> i = 0; i < last; ++i) {
       std::cout << printDecodedInstr(binaries[i].slc<32>(96))
                 << printDecodedInstr(binaries[i].slc<32>(64))
                 << printDecodedInstr(binaries[i].slc<32>(32))
                 << printDecodedInstr(binaries[i].slc<32>( 0)) << std::endl;
     }
	return 0;
}
