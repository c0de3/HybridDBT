#include <dbt/dbtPlateform.h>
#include <dbt/insertions.h>
#include <dbt/profiling.h>

#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>

#include <lib/endianness.h>
#include <lib/tools.h>
#include <simulator/vexSimulator.h>

#include <transformation/firstPassTranslator.h>
#include <transformation/irGenerator.h>
#include <transformation/optimizeBasicBlock.h>
#include <transformation/buildControlFlow.h>
#include <transformation/reconfigureVLIW.h>

#include <lib/debugFunctions.h>

#include <isa/vexISA.h>


#ifndef __NIOS
#include <lib/elfFile.h>
#else
#include <system.h>
#endif

unsigned int tmp_size = 633;
unsigned int tmp_addressStart = 65536;
unsigned char tmp_code[2533] = {
	0x97, 0x21, 0x0, 0x0, 0x93, 0x81, 0x1, 0x57, 0x97, 0x22, 0x0, 0x0, 0x93, 0x82, 0x2, 0xd8,
	0x17, 0x23, 0x0, 0x0, 0x13, 0x3, 0x83, 0x1b, 0x23, 0xb0, 0x2, 0x0, 0x93, 0x82, 0x82, 0x0,
	0xe3, 0xec, 0x62, 0xfe, 0x17, 0x5, 0x0, 0x0, 0x13, 0x5, 0x45, 0x18, 0xef, 0x0, 0x80, 0x13,
	0xef, 0x0, 0x40, 0x1d, 0x3, 0x25, 0x1, 0x0, 0x93, 0x5, 0x81, 0x0, 0x13, 0x6, 0x0, 0x0,
	0xef, 0x0, 0x0, 0x7a, 0x6f, 0x0, 0x40, 0x13, 0x67, 0x80, 0x0, 0x0, 0x37, 0x25, 0x1, 0x0,
	0xb7, 0x27, 0x1, 0x0, 0x13, 0x7, 0x85, 0xd6, 0x93, 0x87, 0xf7, 0xd6, 0xb3, 0x87, 0xe7, 0x40,
	0x13, 0x7, 0xe0, 0x0, 0x63, 0x7c, 0xf7, 0x0, 0x37, 0x3, 0x0, 0x0, 0x13, 0x3, 0x3, 0x0,
	0x63, 0x6, 0x3, 0x0, 0x13, 0x5, 0x85, 0xd6, 0x67, 0x0, 0x3, 0x0, 0x67, 0x80, 0x0, 0x0,
	0x37, 0x25, 0x1, 0x0, 0xb7, 0x25, 0x1, 0x0, 0x93, 0x7, 0x85, 0xd6, 0x93, 0x85, 0x85, 0xd6,
	0xb3, 0x85, 0xf5, 0x40, 0x93, 0xd5, 0x35, 0x40, 0x93, 0xd7, 0xf5, 0x3, 0xb3, 0x85, 0xb7, 0x0,
	0x93, 0xd5, 0x15, 0x40, 0x63, 0x8c, 0x5, 0x0, 0x37, 0x3, 0x0, 0x0, 0x13, 0x3, 0x3, 0x0,
	0x63, 0x6, 0x3, 0x0, 0x13, 0x5, 0x85, 0xd6, 0x67, 0x0, 0x3, 0x0, 0x67, 0x80, 0x0, 0x0,
	0x13, 0x1, 0x1, 0xff, 0x23, 0x30, 0x81, 0x0, 0x83, 0xc7, 0x1, 0x82, 0x23, 0x34, 0x11, 0x0,
	0x63, 0x96, 0x7, 0x2, 0xef, 0xf0, 0x9f, 0xf7, 0xb7, 0x7, 0x0, 0x0, 0x93, 0x87, 0x7, 0x0,
	0x63, 0x8a, 0x7, 0x0, 0x37, 0x15, 0x1, 0x0, 0x13, 0x5, 0x5, 0xa0, 0x17, 0x3, 0xff, 0xff,
	0xe7, 0x0, 0x43, 0xf1, 0x93, 0x7, 0x10, 0x0, 0x23, 0x80, 0xf1, 0x82, 0x83, 0x30, 0x81, 0x0,
	0x3, 0x34, 0x1, 0x0, 0x13, 0x1, 0x1, 0x1, 0x67, 0x80, 0x0, 0x0, 0x13, 0x1, 0x1, 0xff,
	0xb7, 0x7, 0x0, 0x0, 0x23, 0x34, 0x11, 0x0, 0x93, 0x87, 0x7, 0x0, 0x63, 0x8c, 0x7, 0x0,
	0x37, 0x15, 0x1, 0x0, 0x93, 0x85, 0x81, 0x82, 0x13, 0x5, 0x5, 0xa0, 0x17, 0x3, 0xff, 0xff,
	0xe7, 0x0, 0x43, 0xed, 0xb7, 0x17, 0x1, 0x0, 0x13, 0x85, 0x87, 0xe1, 0x83, 0x37, 0x5, 0x0,
	0x63, 0x98, 0x7, 0x0, 0x83, 0x30, 0x81, 0x0, 0x13, 0x1, 0x1, 0x1, 0x6f, 0xf0, 0x5f, 0xf3,
	0xb7, 0x7, 0x0, 0x0, 0x93, 0x87, 0x7, 0x0, 0xe3, 0x86, 0x7, 0xfe, 0xe7, 0x80, 0x7, 0x0,
	0x6f, 0xf0, 0x5f, 0xfe, 0x93, 0x5, 0x5, 0x0, 0x93, 0x6, 0x0, 0x0, 0x13, 0x6, 0x0, 0x0,
	0x13, 0x5, 0x0, 0x0, 0x6f, 0x0, 0x0, 0x13, 0x13, 0x1, 0x1, 0xff, 0x93, 0x5, 0x0, 0x0,
	0x23, 0x30, 0x81, 0x0, 0x23, 0x34, 0x11, 0x0, 0x13, 0x4, 0x5, 0x0, 0xef, 0x0, 0xc0, 0x22,
	0x3, 0xb5, 0x81, 0x80, 0x83, 0x37, 0x85, 0x5, 0x63, 0x84, 0x7, 0x0, 0xe7, 0x80, 0x7, 0x0,
	0x13, 0x5, 0x4, 0x0, 0xef, 0x0, 0x80, 0x61, 0x13, 0x1, 0x1, 0xfe, 0x23, 0x38, 0x81, 0x0,
	0x23, 0x34, 0x91, 0x0, 0x37, 0x14, 0x1, 0x0, 0xb7, 0x14, 0x1, 0x0, 0x93, 0x87, 0x84, 0x9f,
	0x13, 0x4, 0x4, 0xa0, 0x33, 0x4, 0xf4, 0x40, 0x93, 0x4, 0x84, 0xff, 0x23, 0x3c, 0x11, 0x0,
	0x13, 0x54, 0x34, 0x40, 0xb3, 0x84, 0xf4, 0x0, 0x63, 0xc, 0x4, 0x0, 0x83, 0xb7, 0x4, 0x0,
	0x13, 0x4, 0xf4, 0xff, 0x93, 0x84, 0x84, 0xff, 0xe7, 0x80, 0x7, 0x0, 0xe3, 0x18, 0x4, 0xfe,
	0x83, 0x30, 0x81, 0x1, 0x3, 0x34, 0x1, 0x1, 0x83, 0x34, 0x81, 0x0, 0x13, 0x1, 0x1, 0x2,
	0x6f, 0xf0, 0x9f, 0xe4, 0x13, 0x1, 0x1, 0xfe, 0x23, 0x38, 0x81, 0x0, 0x23, 0x30, 0x21, 0x1,
	0x37, 0x14, 0x1, 0x0, 0x37, 0x19, 0x1, 0x0, 0x93, 0x7, 0x4, 0x9f, 0x13, 0x9, 0x9, 0x9f,
	0x33, 0x9, 0xf9, 0x40, 0x23, 0x34, 0x91, 0x0, 0x23, 0x3c, 0x11, 0x0, 0x13, 0x59, 0x39, 0x40,
	0x13, 0x4, 0x4, 0x9f, 0x93, 0x4, 0x0, 0x0, 0x63, 0xc, 0x9, 0x0, 0x83, 0x37, 0x4, 0x0,
	0x93, 0x84, 0x14, 0x0, 0x13, 0x4, 0x84, 0x0, 0xe7, 0x80, 0x7, 0x0, 0xe3, 0x18, 0x99, 0xfe,
	0x37, 0x14, 0x1, 0x0, 0xef, 0xf0, 0x5f, 0xdf, 0x37, 0x19, 0x1, 0x0, 0x93, 0x7, 0x4, 0x9f,
	0x13, 0x9, 0x89, 0x9f, 0x33, 0x9, 0xf9, 0x40, 0x13, 0x59, 0x39, 0x40, 0x13, 0x4, 0x4, 0x9f,
	0x93, 0x4, 0x0, 0x0, 0x63, 0xc, 0x9, 0x0, 0x83, 0x37, 0x4, 0x0, 0x93, 0x84, 0x14, 0x0,
	0x13, 0x4, 0x84, 0x0, 0xe7, 0x80, 0x7, 0x0, 0xe3, 0x18, 0x99, 0xfe, 0x83, 0x30, 0x81, 0x1,
	0x3, 0x34, 0x1, 0x1, 0x83, 0x34, 0x81, 0x0, 0x3, 0x39, 0x1, 0x0, 0x13, 0x1, 0x1, 0x2,
	0x67, 0x80, 0x0, 0x0, 0x13, 0x1, 0x1, 0xfd, 0x23, 0x30, 0x81, 0x2, 0x3, 0xb4, 0x81, 0x80,
	0x23, 0x3c, 0x91, 0x0, 0x93, 0x4, 0x5, 0x0, 0x3, 0x35, 0x84, 0x1f, 0x23, 0x38, 0x21, 0x1,
	0x23, 0x34, 0x31, 0x1, 0x23, 0x30, 0x41, 0x1, 0x23, 0x34, 0x11, 0x2, 0x13, 0x89, 0x5, 0x0,
	0x13, 0xa, 0x6, 0x0, 0x93, 0x89, 0x6, 0x0, 0x63, 0x6, 0x5, 0xc, 0x3, 0x27, 0x85, 0x0,
	0x93, 0x7, 0xf0, 0x1, 0x9b, 0x5, 0x17, 0x0, 0x63, 0xd0, 0xe7, 0x4, 0xb7, 0x7, 0x0, 0x0,
	0x93, 0x87, 0x7, 0x0, 0x63, 0x8e, 0x7, 0xa, 0x13, 0x5, 0x80, 0x31, 0x17, 0x3, 0xff, 0xff,
	0xe7, 0x0, 0x43, 0xd0, 0x63, 0x6, 0x5, 0xa, 0x83, 0x37, 0x84, 0x1f, 0x23, 0x24, 0x5, 0x0,
	0x93, 0x5, 0x10, 0x0, 0x23, 0x30, 0xf5, 0x0, 0x23, 0x3c, 0xa4, 0x1e, 0x23, 0x28, 0x5, 0x30,
	0x23, 0x2a, 0x5, 0x30, 0x13, 0x7, 0x0, 0x0, 0x93, 0x7, 0x7, 0x0, 0x63, 0x9e, 0x4, 0x2,
	0x93, 0x87, 0x27, 0x0, 0x93, 0x97, 0x37, 0x0, 0x23, 0x24, 0xb5, 0x0, 0x33, 0x5, 0xf5, 0x0,
	0x23, 0x30, 0x25, 0x1, 0x13, 0x5, 0x0, 0x0, 0x83, 0x30, 0x81, 0x2, 0x3, 0x34, 0x1, 0x2,
	0x83, 0x34, 0x81, 0x1, 0x3, 0x39, 0x1, 0x1, 0x83, 0x39, 0x81, 0x0, 0x3, 0x3a, 0x1, 0x0,
	0x13, 0x1, 0x1, 0x3, 0x67, 0x80, 0x0, 0x0, 0x13, 0x18, 0x37, 0x0, 0x33, 0x8, 0x5, 0x1,
	0x23, 0x38, 0x48, 0x11, 0x83, 0x28, 0x5, 0x31, 0x13, 0x6, 0x10, 0x0, 0x3b, 0x17, 0xe6, 0x0,
	0x33, 0xe6, 0xe8, 0x0, 0x23, 0x28, 0xc5, 0x30, 0x23, 0x38, 0x38, 0x21, 0x93, 0x6, 0x20, 0x0,
	0xe3, 0x90, 0xd4, 0xfa, 0x83, 0x26, 0x45, 0x31, 0x33, 0xe7, 0xe6, 0x0, 0x23, 0x2a, 0xe5, 0x30,
	0x6f, 0xf0, 0x1f, 0xf9, 0x13, 0x5, 0x4, 0x20, 0x23, 0x3c, 0xa4, 0x1e, 0x6f, 0xf0, 0x1f, 0xf3,
	0x13, 0x5, 0xf0, 0xff, 0x6f, 0xf0, 0x5f, 0xf9, 0x13, 0x1, 0x1, 0xf9, 0x23, 0x34, 0x71, 0x3,
	0x83, 0xbb, 0x81, 0x80, 0x23, 0x38, 0x61, 0x3, 0x37, 0xb, 0x0, 0x0, 0x23, 0x38, 0x21, 0x5,
	0x23, 0x30, 0x41, 0x5, 0x23, 0x3c, 0x51, 0x3, 0x23, 0x30, 0x81, 0x3, 0x23, 0x3c, 0x91, 0x1,
	0x23, 0x34, 0x11, 0x6, 0x23, 0x30, 0x81, 0x6, 0x23, 0x3c, 0x91, 0x4, 0x23, 0x34, 0x31, 0x5,
	0x23, 0x38, 0xa1, 0x1, 0x23, 0x34, 0xb1, 0x1, 0x93, 0xa, 0x5, 0x0, 0x13, 0x89, 0x5, 0x0,
	0x13, 0x8c, 0x8b, 0x1f, 0x13, 0xa, 0x10, 0x0, 0x93, 0xc, 0xf0, 0xff, 0x13, 0xb, 0xb, 0x0,
	0x83, 0xb9, 0x8b, 0x1f, 0x63, 0x84, 0x9, 0x6, 0x93, 0xd, 0xc, 0x0, 0x3, 0xa4, 0x89, 0x0,
	0x1b, 0x4, 0xf4, 0xff, 0x63, 0x46, 0x4, 0x2, 0x93, 0x4, 0x4, 0x0, 0x93, 0x84, 0x24, 0x0,
	0x93, 0x94, 0x34, 0x0, 0xb3, 0x84, 0x99, 0x0, 0x63, 0x0, 0x9, 0x8, 0x83, 0xb7, 0x4, 0x20,
	0x63, 0xc, 0xf9, 0x6, 0x1b, 0x4, 0xf4, 0xff, 0x93, 0x84, 0x84, 0xff, 0xe3, 0x16, 0x94, 0xff,
	0x63, 0x6, 0xb, 0x2, 0x83, 0xa7, 0x89, 0x0, 0x63, 0x9a, 0x7, 0xc, 0x83, 0xb7, 0x9, 0x0,
	0x63, 0x8e, 0x7, 0x0, 0x13, 0x85, 0x9, 0x0, 0x23, 0xb0, 0xfd, 0x0, 0x17, 0x3, 0xff, 0xff,
	0xe7, 0x0, 0x43, 0xb9, 0x83, 0xb9, 0xd, 0x0, 0xe3, 0x92, 0x9, 0xfa, 0x83, 0x30, 0x81, 0x6,
	0x3, 0x34, 0x1, 0x6, 0x83, 0x34, 0x81, 0x5, 0x3, 0x39, 0x1, 0x5, 0x83, 0x39, 0x81, 0x4,
	0x3, 0x3a, 0x1, 0x4, 0x83, 0x3a, 0x81, 0x3, 0x3, 0x3b, 0x1, 0x3, 0x83, 0x3b, 0x81, 0x2,
	0x3, 0x3c, 0x1, 0x2, 0x83, 0x3c, 0x81, 0x1, 0x3, 0x3d, 0x1, 0x1, 0x83, 0x3d, 0x81, 0x0,
	0x13, 0x1, 0x1, 0x7, 0x67, 0x80, 0x0, 0x0, 0x83, 0xa7, 0x89, 0x0, 0x3, 0xb7, 0x4, 0x0,
	0x9b, 0x87, 0xf7, 0xff, 0x63, 0x8a, 0x87, 0x4, 0x23, 0xb0, 0x4, 0x0, 0xe3, 0xc, 0x7, 0xf6,
	0x83, 0xa7, 0x9, 0x31, 0xbb, 0x16, 0x8a, 0x0, 0x3, 0xad, 0x89, 0x0, 0xb3, 0xf7, 0xf6, 0x0,
	0x63, 0x88, 0x7, 0x2, 0x83, 0xa7, 0x49, 0x31, 0xb3, 0xf6, 0xf6, 0x0, 0x63, 0x9a, 0x6, 0x2,
	0x83, 0xb5, 0x4, 0x10, 0x13, 0x85, 0xa, 0x0, 0xe7, 0x0, 0x7, 0x0, 0x83, 0xa7, 0x89, 0x0,
	0xe3, 0x98, 0xa7, 0xf1, 0x83, 0xb7, 0xd, 0x0, 0xe3, 0x8e, 0x37, 0xf3, 0x6f, 0xf0, 0x5f, 0xf0,
	0xe7, 0x0, 0x7, 0x0, 0x6f, 0xf0, 0x9f, 0xfe, 0x23, 0xa4, 0x89, 0x0, 0x6f, 0xf0, 0x1f, 0xfb,
	0x3, 0xb5, 0x4, 0x10, 0xe7, 0x0, 0x7, 0x0, 0x6f, 0xf0, 0x5f, 0xfd, 0x93, 0x8d, 0x9, 0x0,
	0x83, 0xb9, 0x9, 0x0, 0xe3, 0x94, 0x9, 0xee, 0x6f, 0xf0, 0x5f, 0xf4, 0x13, 0x1, 0x1, 0xff,
	0x23, 0x34, 0x11, 0x0, 0x23, 0x30, 0x81, 0x0, 0x13, 0x4, 0x5, 0x0, 0xef, 0x0, 0xc0, 0x28,
	0x83, 0x30, 0x81, 0x0, 0xbb, 0x7, 0x80, 0x40, 0x23, 0x20, 0xf5, 0x0, 0x3, 0x34, 0x1, 0x0,
	0x13, 0x5, 0xf0, 0xff, 0x13, 0x1, 0x1, 0x1, 0x67, 0x80, 0x0, 0x0, 0x13, 0x5, 0x0, 0x0,
	0x67, 0x80, 0x0, 0x0, 0x13, 0x5, 0x0, 0x0, 0x67, 0x80, 0x0, 0x0, 0x13, 0x5, 0x0, 0x0,
	0x67, 0x80, 0x0, 0x0, 0x63, 0x2, 0x6, 0x4, 0x37, 0x98, 0x0, 0x10, 0x83, 0x47, 0x8, 0x0,
	0x93, 0x6, 0xa0, 0x0, 0x13, 0x5, 0x10, 0x0, 0x23, 0x80, 0xf5, 0x0, 0x63, 0x8e, 0xd7, 0x2,
	0xb3, 0x88, 0xc5, 0x0, 0x13, 0x5, 0x0, 0x0, 0x6f, 0x0, 0x40, 0x1, 0x83, 0x47, 0x8, 0x0,
	0x23, 0x80, 0xf5, 0x0, 0x63, 0x8e, 0xd7, 0x0, 0x13, 0x5, 0x7, 0x0, 0x93, 0x85, 0x15, 0x0,
	0x1b, 0x7, 0x15, 0x0, 0xe3, 0x94, 0x15, 0xff, 0x13, 0x5, 0x6, 0x0, 0x67, 0x80, 0x0, 0x0,
	0x1b, 0x5, 0x25, 0x0, 0x67, 0x80, 0x0, 0x0, 0x67, 0x80, 0x0, 0x0, 0xb3, 0x86, 0xc5, 0x0,
	0x37, 0x97, 0x0, 0x10, 0x63, 0xa, 0x6, 0x0, 0x93, 0x85, 0x15, 0x0, 0x83, 0xc7, 0xf5, 0xff,
	0x23, 0x0, 0xf7, 0x0, 0xe3, 0x9a, 0xd5, 0xfe, 0x13, 0x5, 0x6, 0x0, 0x67, 0x80, 0x0, 0x0,
	0x13, 0x5, 0x0, 0x0, 0x67, 0x80, 0x0, 0x0, 0x13, 0x5, 0x0, 0x0, 0x67, 0x80, 0x0, 0x0,
	0x13, 0x5, 0x0, 0x0, 0x67, 0x80, 0x0, 0x0, 0x13, 0x5, 0x0, 0x0, 0x67, 0x80, 0x0, 0x0,
	0x13, 0x5, 0x0, 0x0, 0x67, 0x80, 0x0, 0x0, 0x13, 0x5, 0x0, 0x0, 0x67, 0x80, 0x0, 0x0,
	0x13, 0x5, 0xf0, 0xff, 0x67, 0x80, 0x0, 0x0, 0x13, 0x5, 0x0, 0x0, 0x67, 0x80, 0x0, 0x0,
	0x13, 0x5, 0x0, 0x0, 0x67, 0x80, 0x0, 0x0, 0x13, 0x1, 0x1, 0xff, 0x23, 0x34, 0x11, 0x0,
	0xef, 0x0, 0x80, 0x18, 0x83, 0x30, 0x81, 0x0, 0x93, 0x7, 0xc0, 0x0, 0x23, 0x20, 0xf5, 0x0,
	0x13, 0x1, 0x1, 0x1, 0x13, 0x5, 0xf0, 0xff, 0x67, 0x80, 0x0, 0x0, 0x13, 0x1, 0x1, 0xff,
	0x23, 0x34, 0x11, 0x0, 0xef, 0x0, 0x40, 0x16, 0x83, 0x30, 0x81, 0x0, 0x93, 0x7, 0xb0, 0x0,
	0x23, 0x20, 0xf5, 0x0, 0x13, 0x1, 0x1, 0x1, 0x13, 0x5, 0xf0, 0xff, 0x67, 0x80, 0x0, 0x0,
	0x13, 0x5, 0x10, 0x0, 0x67, 0x80, 0x0, 0x0, 0x13, 0x1, 0x1, 0xff, 0x23, 0x34, 0x11, 0x0,
	0xef, 0x0, 0x80, 0x13, 0x83, 0x30, 0x81, 0x0, 0x93, 0x7, 0x60, 0x1, 0x23, 0x20, 0xf5, 0x0,
	0x13, 0x1, 0x1, 0x1, 0x13, 0x5, 0xf0, 0xff, 0x67, 0x80, 0x0, 0x0, 0x13, 0x1, 0x1, 0xff,
	0x23, 0x34, 0x11, 0x0, 0xef, 0x0, 0x40, 0x11, 0x83, 0x30, 0x81, 0x0, 0x93, 0x7, 0xa0, 0x0,
	0x23, 0x20, 0xf5, 0x0, 0x13, 0x1, 0x1, 0x1, 0x13, 0x5, 0xf0, 0xff, 0x67, 0x80, 0x0, 0x0,
	0x13, 0x1, 0x1, 0xf8, 0x3, 0x25, 0x1, 0x1, 0x13, 0x1, 0x1, 0x8, 0x1b, 0x55, 0xd5, 0x40,
	0x13, 0x75, 0x15, 0x0, 0x67, 0x80, 0x0, 0x0, 0x13, 0x1, 0x1, 0xff, 0xb7, 0x47, 0xf, 0x0,
	0x13, 0x87, 0x7, 0x24, 0x83, 0x37, 0x1, 0x0, 0x83, 0x36, 0x81, 0x0, 0x23, 0x38, 0x5, 0x0,
	0xb3, 0x87, 0xe7, 0x2, 0x23, 0x3c, 0x5, 0x0, 0x13, 0x7, 0x5, 0x0, 0x23, 0x34, 0x5, 0x0,
	0x13, 0x1, 0x1, 0x1, 0x13, 0x5, 0xf0, 0xff, 0xb3, 0x87, 0xd7, 0x0, 0x23, 0x30, 0xf7, 0x0,
	0x67, 0x80, 0x0, 0x0, 0x13, 0x5, 0x0, 0x0, 0x67, 0x80, 0x0, 0x0, 0x23, 0x14, 0x5, 0x0,
	0x23, 0x30, 0x5, 0x0, 0x13, 0x5, 0x0, 0x0, 0x67, 0x80, 0x0, 0x0, 0x13, 0x5, 0xf0, 0xff,
	0x67, 0x80, 0x0, 0x0, 0x13, 0x5, 0xf0, 0xff, 0x67, 0x80, 0x0, 0x0, 0x13, 0x5, 0xf0, 0xff,
	0x67, 0x80, 0x0, 0x0, 0x13, 0x5, 0xf0, 0xff, 0x67, 0x80, 0x0, 0x0, 0x13, 0x5, 0x0, 0x0,
	0x67, 0x80, 0x0, 0x0, 0x93, 0x7, 0x20, 0x0, 0x63, 0x18, 0xf5, 0x0, 0x37, 0x45, 0xf, 0x0,
	0x13, 0x5, 0x5, 0x24, 0x67, 0x80, 0x0, 0x0, 0x13, 0x5, 0xf0, 0xff, 0x67, 0x80, 0x0, 0x0,
	0x83, 0xb7, 0x81, 0x81, 0x63, 0x8a, 0x7, 0x0, 0x33, 0x85, 0xa7, 0x0, 0x23, 0xbc, 0xa1, 0x80,
	0x13, 0x85, 0x7, 0x0, 0x67, 0x80, 0x0, 0x0, 0x93, 0x87, 0x81, 0xc5, 0x33, 0x85, 0xa7, 0x0,
	0x23, 0xbc, 0xa1, 0x80, 0x13, 0x85, 0x7, 0x0, 0x67, 0x80, 0x0, 0x0, 0x93, 0x5, 0x0, 0x0,
	0x13, 0x6, 0x0, 0x0, 0x93, 0x6, 0x0, 0x0, 0x93, 0x8, 0xd0, 0x5, 0x73, 0x0, 0x0, 0x0,
	0xe3, 0x46, 0x5, 0xd6, 0x6f, 0x0, 0x0, 0x0, 0x3, 0xb5, 0x1, 0x81, 0x67, 0x80, 0x0, 0x0,
	0x13, 0x1, 0x1, 0xf7, 0xb7, 0x17, 0x1, 0x0, 0x23, 0x38, 0x31, 0x7, 0x93, 0x89, 0x7, 0xe2,
	0x93, 0x87, 0x81, 0x85, 0x23, 0x34, 0x81, 0x8, 0x23, 0x30, 0x91, 0x8, 0x23, 0x3c, 0x21, 0x7,
	0x23, 0x34, 0x41, 0x7, 0x23, 0x30, 0x51, 0x7, 0x23, 0x3c, 0x61, 0x5, 0x23, 0x38, 0x71, 0x5,
	0x23, 0x34, 0x81, 0x5, 0x23, 0x30, 0x91, 0x5, 0x23, 0x3c, 0xa1, 0x3, 0x23, 0x38, 0xb1, 0x3,
	0x23, 0x30, 0xf1, 0x2, 0x83, 0xa7, 0x9, 0x2, 0x37, 0x17, 0x1, 0x0, 0x3, 0x39, 0x1, 0x2,
	0x23, 0x22, 0xf1, 0x0, 0x83, 0xa7, 0x49, 0x2, 0x13, 0x7, 0x7, 0x22, 0x83, 0xad, 0x9, 0x0,
	0x23, 0x24, 0xf1, 0x0, 0x83, 0xa7, 0x89, 0x2, 0x3, 0xad, 0x49, 0x0, 0x83, 0xac, 0x89, 0x0,
	0x23, 0x26, 0xf1, 0x0, 0x83, 0xa7, 0xc9, 0x2, 0x3, 0xac, 0xc9, 0x0, 0x83, 0xab, 0x9, 0x1,
	0x23, 0x28, 0xf1, 0x0, 0x83, 0xa7, 0x9, 0x3, 0x3, 0xab, 0x49, 0x1, 0x83, 0xaa, 0x89, 0x1,
	0x23, 0x2a, 0xf1, 0x0, 0x83, 0xa7, 0x49, 0x3, 0x3, 0xaa, 0xc9, 0x1, 0x23, 0x34, 0x31, 0x3,
	0x23, 0x2c, 0xf1, 0x0, 0x83, 0xa7, 0x89, 0x3, 0x93, 0x4, 0x7, 0x0, 0x23, 0x2e, 0xf1, 0x0,
	0x83, 0xa7, 0xc9, 0x3, 0x93, 0x89, 0x7, 0x0, 0x83, 0xa3, 0x4, 0x10, 0x3, 0xa8, 0x4, 0x14,
	0x83, 0xa6, 0x4, 0x18, 0x3, 0xa4, 0x4, 0x0, 0x83, 0xa8, 0x4, 0x4, 0x3, 0xa5, 0x4, 0x8,
	0xbb, 0x83, 0x7b, 0x2, 0x3, 0xa6, 0x4, 0x24, 0x83, 0xa2, 0x4, 0x20, 0x3, 0xa7, 0x4, 0x28,
	0x83, 0xa5, 0x4, 0xc, 0x83, 0xaf, 0x4, 0x1c, 0x83, 0xa7, 0x4, 0x34, 0x83, 0xae, 0x4, 0x2c,
	0x3, 0xaf, 0x4, 0x30, 0x3, 0xae, 0x4, 0x38, 0x3b, 0x8, 0xb, 0x3, 0x3, 0xa3, 0x4, 0x3c,
	0x13, 0x9, 0x49, 0x0, 0x93, 0x84, 0x44, 0x0, 0xbb, 0x86, 0xda, 0x2, 0x3b, 0x88, 0x3, 0x1,
	0x3b, 0x84, 0x8d, 0x2, 0x3b, 0x8, 0xd8, 0x0, 0x83, 0x26, 0x81, 0x0, 0xbb, 0x8, 0x1d, 0x3,
	0x3b, 0x85, 0xac, 0x2, 0xbb, 0x8, 0x14, 0x1, 0xbb, 0x88, 0xa8, 0x0, 0x3, 0x25, 0x41, 0x0,
	0x3b, 0x86, 0xc6, 0x2, 0x83, 0x26, 0xc1, 0x0, 0xbb, 0x2, 0x55, 0x2, 0x3b, 0x87, 0xe6, 0x2,
	0xbb, 0x82, 0xc2, 0x0, 0x83, 0x26, 0x41, 0x1, 0xbb, 0x5, 0xbc, 0x2, 0xbb, 0x82, 0xe2, 0x0,
	0x3, 0x27, 0x81, 0x1, 0xbb, 0xf, 0xfa, 0x3, 0xbb, 0x88, 0xb8, 0x0, 0x3b, 0x8, 0xf8, 0x1,
	0xbb, 0x88, 0x8, 0x1, 0x3b, 0x8, 0xf7, 0x2, 0x83, 0x27, 0x1, 0x1, 0xbb, 0x8e, 0xd7, 0x3,
	0x83, 0x27, 0xc1, 0x1, 0x3b, 0x8f, 0xe6, 0x3, 0xbb, 0x82, 0xd2, 0x1, 0xbb, 0x88, 0x12, 0x1,
	0x3b, 0x8e, 0xc7, 0x3, 0x3b, 0x8, 0xf, 0x1, 0xb7, 0x17, 0x1, 0x0, 0x93, 0x87, 0x7, 0x26,
	0x3b, 0x83, 0x69, 0x2, 0x3b, 0x8, 0xc8, 0x1, 0x3b, 0x8, 0x68, 0x0, 0x3b, 0x8, 0x18, 0x1,
	0x23, 0x2e, 0x9, 0xff, 0xe3, 0x9a, 0x97, 0xf0, 0x83, 0x37, 0x1, 0x2, 0x83, 0x39, 0x81, 0x2,
	0x93, 0x87, 0x7, 0x4, 0x23, 0x30, 0xf1, 0x2, 0xb7, 0x17, 0x1, 0x0, 0x93, 0x89, 0x9, 0x4,
	0x93, 0x87, 0x7, 0x22, 0xe3, 0x90, 0x37, 0xe9, 0x13, 0x5, 0x0, 0x0, 0x3, 0x34, 0x81, 0x8,
	0x83, 0x34, 0x1, 0x8, 0x3, 0x39, 0x81, 0x7, 0x83, 0x39, 0x1, 0x7, 0x3, 0x3a, 0x81, 0x6,
	0x83, 0x3a, 0x1, 0x6, 0x3, 0x3b, 0x81, 0x5, 0x83, 0x3b, 0x1, 0x5, 0x3, 0x3c, 0x81, 0x4,
	0x83, 0x3c, 0x1, 0x4, 0x3, 0x3d, 0x81, 0x3, 0x83, 0x3d, 0x1, 0x3, 0x13, 0x1, 0x1, 0x9,
0};

void printStats(unsigned int size, short* blockBoundaries){

	float numberBlocks = 0;

	for (int oneInstruction = 0; oneInstruction < size; oneInstruction++){
		if (blockBoundaries[oneInstruction] == 1)
			numberBlocks++;
	}

	printf("\n* Statistics on used binaries:\n");
	printf("* \tThere is %d instructions.\n", size);
	printf("* \tThere is %d blocks.\n", (int) numberBlocks);
	printf("* \tBlocks mean size is %f.\n\n", size/numberBlocks);

}


int translateOneSection(DBTPlateform &dbtPlateform, uint32 placeCode, int sectionStart, int startAddressSource, int endAddressSource){
	int previousPlaceCode = placeCode;
	uint32 size = (endAddressSource - startAddressSource)>>2;
	int addressStart = startAddressSource;
	placeCode = firstPassTranslator_RISCV(&dbtPlateform,
			size,
			sectionStart,
			addressStart,
			placeCode);


	//	debugFirstPassResult(dbtPlateform, previousPlaceCode+1, placeCode, addressStart);


		//We write back the result if needed
		void* destinationBinariesFile = openWriteFile((void*) "./binaries");
		unsigned int sizeBinaries = (placeCode<<4);

		return placeCode;
}


void readSourceBinaries(char* path, unsigned char *&code, unsigned int &addressStart, uint32 &size, DBTPlateform *platform){

#ifndef __NIOS
	//We open the elf file and search for the section that is of interest for us
	ElfFile elfFile(path);


	for (unsigned int sectionCounter = 0; sectionCounter<elfFile.sectionTable->size(); sectionCounter++){
		ElfSection *section = elfFile.sectionTable->at(sectionCounter);

		//The section we are looking for is called .text
		if (!section->getName().compare(".text")){

			code = section->getSectionCode();//0x3c
			addressStart = section->address + 0;
			size = section->size/4 - 0;

		}
	}


	for (unsigned int sectionCounter = 0; sectionCounter<elfFile.sectionTable->size(); sectionCounter++){
		ElfSection *section = elfFile.sectionTable->at(sectionCounter);

		if (section->address != 0){

			unsigned char* data = section->getSectionCode();
			platform->vexSimulator->initializeDataMemory(data, section->size, section->address);
			free(data);
		}
	}


#else
//	read(0, &addressStart, sizeof(int));
//	read(0, &size, sizeof(int));
	addressStart = tmp_addressStart;
	size = tmp_size;
	code = tmp_code;
//	code = (unsigned char*) malloc(size*sizeof(unsigned char));
//
//	for (int oneByte = 0; oneByte<size; oneByte++){
//		read(0, &code[oneByte], sizeof(char));
//	}

	size = size/4;
#endif
}

int run(DBTPlateform *platform, int nbCycle){
#ifndef __NIOS
	return platform->vexSimulator->doStep(nbCycle);
#else
	printf("starting run\n");

//#define ALT_CI_COMPONENT_RUN_0(A,B) __builtin_custom_inii(ALT_CI_COMPONENT_RUN_0_N,(A),(B))
//#define ALT_CI_COMPONENT_RUN_0_1(A,B) __builtin_custom_inii(ALT_CI_COMPONENT_RUN_0_1_N,(A),(B))
//#define ALT_CI_COMPONENT_RUN_0_1_N 0x4
//#define ALT_CI_COMPONENT_RUN_0_2(A,B) __builtin_custom_inii(ALT_CI_COMPONENT_RUN_0_2_N,(A),(B))
//#define ALT_CI_COMPONENT_RUN_0_2_N 0x5
//#define ALT_CI_COMPONENT_RUN_0_3(A,B) __builtin_custom_inii(ALT_CI_COMPONENT_RUN_0_3_N,(A),(B))

	int start = 0;
	 ALT_CI_COMPONENT_RUN_0(0,0);
	 int status = ALT_CI_COMPONENT_RUN_0_2(0,0);
	 if ((status & 0x3) == 1)
		 return 0;
	 ALT_CI_COMPONENT_RUN_0_1(0,0);
	 ALT_CI_COMPONENT_RUN_0(0,0);
	 return (ALT_CI_COMPONENT_RUN_0_3(0,0))>>2;


#endif

}




int main(int argc, char *argv[])
{

	printf("Entry\n");

	/***********************************
	 *  Initialization of the DBT platform
	 ***********************************
	 * In the linux implementation, this is done by reading an elf file and copying binary instructions
	 * in the corresponding memory.
	 * In a real platform, this may require no memory initialization as the binaries would already be stored in the
	 * system memory.
	 ************************************/

	//Definition of objects used for DBT process
	DBTPlateform dbtPlateform;

	#ifndef __NIOS
	dbtPlateform.vexSimulator = new VexSimulator(dbtPlateform.vliwBinaries);
	#endif

	unsigned char* code;
	unsigned int addressStart;
	uint32 size;

	//We read the binaries
	readSourceBinaries(argv[1], code, addressStart, size, &dbtPlateform);

	int numberOfSections = 1 + (size>>10);
	IRApplication application = IRApplication(numberOfSections);
	Profiler profiler = Profiler(&dbtPlateform);





	//we copy the binaries in the corresponding memory
	for (int oneInstruction = 0; oneInstruction<size; oneInstruction++)
		dbtPlateform.mipsBinaries[oneInstruction] = ((unsigned int*) code)[oneInstruction];


	//We declare the variable in charge of keeping a track of where we are writing
	uint32 placeCode = 0; //As 4 instruction bundle

	//We add initialization code to the vliw binaries
	placeCode = getInitCode(&dbtPlateform, placeCode, addressStart);
	placeCode = insertCodeForInsertions(&dbtPlateform, placeCode, addressStart);

	//We modify the initialization call
	writeInt(dbtPlateform.vliwBinaries, 0*16, assembleIInstruction(VEX_CALL, placeCode<<2, 63));

	initializeInsertionsMemory(size*4);

	/********************************************************
	 * First part of DBT: generating the first pass translation of binaries
	 *******************************************************
	 * TODO: description
	 *
	 *
	 ********************************************************/


	for (int oneSection=0; oneSection<(size>>10)+1; oneSection++){

		int startAddressSource = addressStart + oneSection*1024*4;
		int endAddressSource = startAddressSource + 1024*4;
		if (endAddressSource > addressStart + size*4)
			endAddressSource = addressStart + (size<<2);


		int effectiveSize = (endAddressSource - startAddressSource)>>2;
		for (int j = 0; j<effectiveSize; j++){
			dbtPlateform.mipsBinaries[j] = ((unsigned int*) code)[j+oneSection*1024];
		}
		int oldPlaceCode = placeCode;

		placeCode =  translateOneSection(dbtPlateform, placeCode, addressStart, startAddressSource,endAddressSource);

		buildBasicControlFlow(dbtPlateform, oneSection, startAddressSource, oldPlaceCode, placeCode, &application);


		//We select blocks for profiling:
		//If a block has more than 16 instructions, it is eligible for profiling.
		//TODO use a DEFINE instead of a fixed number of threshold
		for (int oneBlock = 0; oneBlock<application.numbersBlockInSections[oneSection]; oneBlock++){
			IRBlock *block = application.blocksInSections[oneSection][oneBlock];
			printf("Inspecting one block %d to %d\n", block->vliwEndAddress,block->vliwStartAddress);

			if (block->vliwEndAddress - block->vliwStartAddress>16){
				profiler.profileBlock(application.blocksInSections[oneSection][oneBlock]);
			}

		}
	}

	for (int oneUnresolvedJump = 0; oneUnresolvedJump<unresolvedJumpsArray[0]; oneUnresolvedJump++){
		unsigned int source = unresolvedJumpsSourceArray[oneUnresolvedJump+1];
		unsigned int initialDestination = unresolvedJumpsArray[oneUnresolvedJump+1];
		unsigned char type = unresolvedJumpsTypeArray[oneUnresolvedJump+1];

		unsigned int oldJump = readInt(dbtPlateform.vliwBinaries, 16*(source));
		unsigned int indexOfDestination = 0;

		unsigned int destinationInVLIWFromNewMethod = solveUnresolvedJump(initialDestination);
		if (destinationInVLIWFromNewMethod == -1){
			printf("A jump from %d to %x is still unresolved... (%d insertions)\n", source, initialDestination, insertionsArray[(initialDestination>>10)<<11]);
		}
		else if (type == UNRESOLVED_JUMP_ABSOLUTE){
			//In here we solve an absolute jump
			indexOfDestination = destinationInVLIWFromNewMethod;
			initialDestination = destinationInVLIWFromNewMethod;
			initialDestination = initialDestination << 2; //This is compute the destination according to the #of instruction and not the number of 4-instr bundle
			writeInt(dbtPlateform.vliwBinaries, 16*(source), oldJump + ((initialDestination & 0x7ffff)<<7));

		}
		else{
			//In here we solve a relative jump

			indexOfDestination = destinationInVLIWFromNewMethod;
			initialDestination = destinationInVLIWFromNewMethod;

			initialDestination = initialDestination  - (source) ;
			initialDestination = initialDestination << 2; //This is compute the destination according to the #of instruction and not the number of 4-instr bundle

			//We modify the jump instruction to make it jump at the correct place
			writeInt(dbtPlateform.vliwBinaries, 16*(source), oldJump + ((initialDestination & 0x7ffff)<<7));

		}

		unsigned int instructionBeforePreviousDestination = readInt(dbtPlateform.vliwBinaries, 16*(indexOfDestination-1)+12);
		if (instructionBeforePreviousDestination != 0)
					writeInt(dbtPlateform.vliwBinaries, 16*(source+1)+12, instructionBeforePreviousDestination);
	}

	for (int oneInstruction = 0; oneInstruction<placeCode; oneInstruction++){


//		uint32 instr0 = dbtPlateform.vliwBinaries[4*oneInstruction];
//		uint32 instr1 = dbtPlateform.vliwBinaries[4*oneInstruction+1];
//		uint32 instr2 = dbtPlateform.vliwBinaries[4*oneInstruction+2];
//		uint32 instr3 = dbtPlateform.vliwBinaries[4*oneInstruction+3];
//		dbtPlateform.vliwBinaries[4*oneInstruction] = instr3;
//		dbtPlateform.vliwBinaries[4*oneInstruction+1] = instr2;
//		dbtPlateform.vliwBinaries[4*oneInstruction+2] = instr1;
//		dbtPlateform.vliwBinaries[4*oneInstruction+3] = instr0;

		printf("%x, %x, %x, %x\n",dbtPlateform.vliwBinaries[4*oneInstruction],
				dbtPlateform.vliwBinaries[4*oneInstruction+1],
				dbtPlateform.vliwBinaries[oneInstruction*4+2],
				dbtPlateform.vliwBinaries[oneInstruction*4+3]);

	}



	//We write back the result if needed
	void* destinationBinariesFile = openWriteFile((void*) "./binaries");
	unsigned int sizeBinaries = (placeCode<<4);


	//We initialize the VLIW processor with binaries and data from elf file
	#ifndef __NIOS
	dbtPlateform.vexSimulator->debugLevel = 2;
//	dbtPlateform.vexSimulator->debugLevel = 0;
	#endif



	//We also add information on insertions
	int insertionSize = 65536;
	int areaCodeStart=1;
	int areaStartAddress = 0;

	#ifndef __NIOS
	dbtPlateform.vexSimulator->initializeDataMemory((unsigned char*) insertionsArray, 65536*4, 0x7000000);
	#endif

	#ifndef __NIOS
	dbtPlateform.vexSimulator->initializeRun(0);
	#endif

	int runStatus=0;


	while (runStatus == 0){
		runStatus = run(&dbtPlateform, 1000);

		//If a profiled block is executed more than 10 times we optimize it and mark it as optimized
		for (int oneBlock = 0; oneBlock<profiler.getNumberProfiledBlocks(); oneBlock++){
			int profileResult = profiler.getProfilingInformation(oneBlock);
			IRBlock* block = profiler.getBlock(oneBlock);

			if (profileResult > 10 && block->blockState < IRBLOCK_STATE_SCHEDULED){
				fprintf(stderr, "Block from %d to %d is eligible to opti (%d exec)\n", block->vliwStartAddress, block->vliwEndAddress, profileResult);
				optimizeBasicBlock(block, &dbtPlateform, &application);
			}


//				if (profileResult > 20 && block->blockState == IRBLOCK_STATE_SCHEDULED){
//
//					fprintf(stderr, "Block from %d to %d is eligible advanced control flow building\n", block->vliwStartAddress, block->vliwEndAddress);
//					buildAdvancedControlFlow(&dbtPlateform, block, &application);
//					block->blockState = IRBLOCK_STATE_RECONF;
//					reconfigureVLIW(&dbtPlateform, application.procedures[application.numberProcedures-1]);
//					dbtPlateform.vexSimulator->initializeCodeMemory(dbtPlateform.vliwBinaries, sizeBinaries, 0);
//
//				}
		}

	}

	printf("ending run %d \n", profiler.getNumberProfiledBlocks());


	for (int oneBlock = 0; oneBlock<profiler.getNumberProfiledBlocks(); oneBlock++){
		IRBlock* block = profiler.getBlock(oneBlock);
		fprintf(stdout, "Block from %d to %d was executed %d times\n", block->vliwStartAddress, block->vliwEndAddress, profiler.getProfilingInformation(oneBlock));
	}

	//We print profiling result
	#ifndef __NIOS
	delete dbtPlateform.vexSimulator;
	free(code);
	#endif


}

